{"ast":null,"code":"var _jsxFileName = \"/Users/musafirikayambi/Desktop/react-assignment-1-kayambi/src/components/Game.js\";\nimport React, { Component } from 'react';\nimport Board from './Board'; // import Header from './Header';\n\nexport default class Game extends Component {\n  // adding a constructor to  the Game  initial state to contain an array\n  constructor(props) {\n    super(props);\n    this.state = {\n      history: [{\n        squares: Array(9).fill(null)\n      }],\n      xIsNext: true\n    };\n  }\n\n  handleClick(i) {\n    const history = this.state.history;\n    const current = history[history.length - 1]; //  create a copy of the squares to be modified instead of modifying the original\n    // using slice() method and the take the turns between two players \n\n    const squares = current.squares.slice(); // once there is a winner the game must be stoped\n\n    if (determineTheWinner(squares) || squares[i]) {\n      return;\n    }\n\n    squares[i] = this.state.xisNext ? \"X\" : \"O\"; //        Save new outcome of squares clicked  to the existing squares data\n\n    this.setState({\n      history: history.concat([{\n        squares: squares\n      }]),\n      xisNext: !this.state.xisNext\n    });\n  }\n\n  render() {\n    const history = this.state.history;\n    const current = history[history.length - 1];\n    const winner = determineTheWinner(current.squares);\n    const moves = history.map((step, move) => {\n      const desc = move ? 'go to move # ' + move : 'go to game start ';\n      return /*#__PURE__*/React.createElement(\"li\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(\"button\", {\n        onClick: () => this.jumpTo(move),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 13\n        }\n      }, desc));\n    });\n    let status;\n\n    if (winner) {\n      status = \"winner is :\" + winner;\n    } else {\n      status = \"Next player is \" + (this.state.xisNext ? \"X\" : \"O\");\n    }\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"game\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"game-board\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Board, {\n      squares: current.squares,\n      OnClick: i => this.handleClick(i),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 13\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"game-info\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 10\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 10\n      }\n    }, status), /*#__PURE__*/React.createElement(\"ol\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 10\n      }\n    }, moves)));\n  }\n\n}","map":{"version":3,"sources":["/Users/musafirikayambi/Desktop/react-assignment-1-kayambi/src/components/Game.js"],"names":["React","Component","Board","Game","constructor","props","state","history","squares","Array","fill","xIsNext","handleClick","i","current","length","slice","determineTheWinner","xisNext","setState","concat","render","winner","moves","map","step","move","desc","jumpTo","status"],"mappings":"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","sourcesContent":["import React, {Component}  from 'react';\nimport Board from './Board'; \n// import Header from './Header';\n\n\nexport default class  Game extends Component { \n// adding a constructor to  the Game  initial state to contain an array\n  constructor (props){\n    super(props)\n    this.state = { \n      history:[{\n        squares:Array(9).fill(null),\n      }],\n      xIsNext:true,\n    }\n  }\n  handleClick(i){\n    const history  = this.state.history;\n    const current =history[history.length-1];   \n    //  create a copy of the squares to be modified instead of modifying the original\n    // using slice() method and the take the turns between two players \n    const squares = current.squares.slice()\n\n    // once there is a winner the game must be stoped\n    if (determineTheWinner(squares) || squares[i]){\n            return;\n    }\n           squares[i] = this.state.xisNext ? \"X\": \"O\";\n    //        Save new outcome of squares clicked  to the existing squares data\n           this.setState ({ \n               history:history.concat([{\n               squares:squares,\n               }]),\n               xisNext:!this.state.xisNext,\n    });\n}\n\nrender(){ \n\nconst history = this.state.history;\nconst current =history[history.length -1];\nconst winner = determineTheWinner(current.squares) \nconst moves = history.map((step,move)=>{\n        const desc =move ? 'go to move # ' + move : 'go to game start ';\n        return (\n          <li>\n            <button onClick={() => this.jumpTo(move)}>{desc}</button>\n          </li>\n        )\n\n})\n  let status;\n  if (winner) {\n          status = \"winner is :\" + winner; \n\n  }else {\n          status =\"Next player is \" + (this.state.xisNext ? \"X\":\"O\") ;\n  }\n\n  return( \n        <div className=\"game\">\n        <div className=\"game-board\">\n            <Board  \n            squares={current.squares}\n            OnClick ={(i) => this.handleClick(i)}  \n            />\n\n         </div>\n         <div className=\"game-info\"> \n         <div>{status}</div>\n         <ol>{moves}</ol>\n         </div>\n         </div>\n         );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}