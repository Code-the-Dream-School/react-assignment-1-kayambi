{"ast":null,"code":"var _jsxFileName = \"/Users/musafirikayambi/Desktop/react-assignment-1-kayambi/src/components/Board.js\";\n// react class component \nimport React from 'react';\nimport Cell from './Cell';\n\nclass Board extends React.Component {\n  // adding a constructor to  the board's initial state to contain anarray\n  //  of 9 nulls corresponding to the squares\n  // handleClick(i){\n  //         //  create a copy of the squares to be modified instead of modifying the original\n  //         // using slice() metho\n  //         const newSquares = this.state.squares.slice();\n  //               if (determineTheWinner(newSquares) || newSquares[i]){\n  //                       alert(\"the game is over, restart the game\")\n  //                       return;\n  //               } \n  //                newSquares[i] = this.state.xisNext ? \"X\":\"O\" ;\n  //         //        Save new outcome of squares clicked  to the existing cellls data\n  //                this.setState ({\n  //                        squares:newSquares,\n  //                        xisNext: !this.state.xisNext,\n  //         })\n  // }\n  // Square should be rendered and attach an event listiners to it.\n  renderSquare(i) {\n    return /*#__PURE__*/React.createElement(Cell, {\n      value: this.props.squares[i] // a fuction that square can call when clicked  \n      ,\n      onClick: () => this.props.onClick(i),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 24\n      }\n    });\n  }\n\n  render() {\n    // const winner = determineTheWinner(this.state.squares) \n    // let status;\n    // if (winner){\n    //         status = \"Winner is :\" + winner;\n    // }else {\n    //         status = \"next player\" + (this.state.xisNext ? \"X\":\"O\");\n    // }\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 9\n      }\n    }, this.renderSquare(0), this.renderSquare(1), this.renderSquare(2)), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }\n    }, this.renderSquare(3), this.renderSquare(4), this.renderSquare(5)), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }\n    }, this.renderSquare(6), this.renderSquare(7), this.renderSquare(8)));\n  }\n\n}","map":{"version":3,"sources":["/Users/musafirikayambi/Desktop/react-assignment-1-kayambi/src/components/Board.js"],"names":["React","Cell","Board","Component","renderSquare","i","props","squares","onClick","render"],"mappings":";AAAA;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,IAAP,MAAiB,QAAjB;;AAGA,MAAMC,KAAN,SAAoBF,KAAK,CAACG,SAA1B,CAAoC;AAC5B;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAC,EAAAA,YAAY,CAACC,CAAD,EAAG;AACP,wBAAO,oBAAC,IAAD;AAAM,MAAA,KAAK,EAAG,KAAKC,KAAL,CAAWC,OAAX,CAAmBF,CAAnB,CAAd,CACf;AADe;AAEC,MAAA,OAAO,EAAI,MAAI,KAAKC,KAAL,CAAWE,OAAX,CAAmBH,CAAnB,CAFhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AAIP;;AACDI,EAAAA,MAAM,GAAE;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACF,wBACA;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAEE;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACS,KAAKL,YAAL,CAAkB,CAAlB,CADT,EAES,KAAKA,YAAL,CAAkB,CAAlB,CAFT,EAGS,KAAKA,YAAL,CAAkB,CAAlB,CAHT,CAFF,eAOE;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACS,KAAKA,YAAL,CAAkB,CAAlB,CADT,EAES,KAAKA,YAAL,CAAkB,CAAlB,CAFT,EAGS,KAAKA,YAAL,CAAkB,CAAlB,CAHT,CAPF,eAYE;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACS,KAAKA,YAAL,CAAkB,CAAlB,CADT,EAES,KAAKA,YAAL,CAAkB,CAAlB,CAFT,EAGS,KAAKA,YAAL,CAAkB,CAAlB,CAHT,CAZF,CADA;AAmBE;;AArD4B","sourcesContent":["// react class component \nimport React from 'react';\nimport Cell from './Cell';\n\n\nclass Board extends React.Component { \n        // adding a constructor to  the board's initial state to contain anarray\n        //  of 9 nulls corresponding to the squares\n\n        // handleClick(i){\n        //         //  create a copy of the squares to be modified instead of modifying the original\n        //         // using slice() metho\n        //         const newSquares = this.state.squares.slice();\n        //               if (determineTheWinner(newSquares) || newSquares[i]){\n        //                       alert(\"the game is over, restart the game\")\n        //                       return;\n        //               } \n        //                newSquares[i] = this.state.xisNext ? \"X\":\"O\" ;\n        //         //        Save new outcome of squares clicked  to the existing cellls data\n        //                this.setState ({\n        //                        squares:newSquares,\n        //                        xisNext: !this.state.xisNext,\n        //         })\n        // }\n        // Square should be rendered and attach an event listiners to it.\n        renderSquare(i){\n                return <Cell value ={this.props.squares[i]} \n        // a fuction that square can call when clicked  \n                        onClick = {()=>this.props.onClick(i)}\n                        />\n        }\n        render(){\n        // const winner = determineTheWinner(this.state.squares) \n        // let status;\n        // if (winner){\n        //         status = \"Winner is :\" + winner;\n        // }else {\n        //         status = \"next player\" + (this.state.xisNext ? \"X\":\"O\");\n        // }\n      return ( \n      <div className=\"container\">\n        {/* <div className=\"status\">{status}</div> */}\n        <div className=\"row\">\n                {this.renderSquare(0)}\n                {this.renderSquare(1)}           \n                {this.renderSquare(2)}\n        </div>\n        <div className=\"row\">\n                {this.renderSquare(3)}\n                {this.renderSquare(4)}           \n                {this.renderSquare(5)}\n        </div>\n        <div className=\"row\">\n                {this.renderSquare(6)}\n                {this.renderSquare(7)}           \n                {this.renderSquare(8)}\n        </div>\n      </div>\n      )}\n    }\n   "]},"metadata":{},"sourceType":"module"}