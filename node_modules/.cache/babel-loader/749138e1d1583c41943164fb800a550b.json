{"ast":null,"code":"var _jsxFileName = \"/Users/musafirikayambi/Desktop/react-assignment-1-kayambi/src/components/Board.js\";\n// react class component \nimport React from 'react';\nimport Cell from './Cell';\n\nclass Board extends React.Component {\n  // adding a constructor to  the board's initial state to contain anarray\n  //  of 9 nulls corresponding to the squares\n  // handleClick(i){\n  //         //  create a copy of the squares to be modified instead of modifying the original\n  //         // using slice() metho\n  //         const newSquares = this.state.squares.slice();\n  //               if (determineTheWinner(newSquares) || newSquares[i]){\n  //                       alert(\"the game is over, restart the game\")\n  //                       return;\n  //               } \n  //                newSquares[i] = this.state.xisNext ? \"X\":\"O\" ;\n  //         //        Save new outcome of squares clicked  to the existing cellls data\n  //                this.setState ({\n  //                        squares:newSquares,\n  //                        xisNext: !this.state.xisNext,\n  //         })\n  // }\n  // Square should be rendered and attach an event listiners to it.\n  renderSquare(i) {\n    return /*#__PURE__*/React.createElement(Cell, {\n      value: this.props.squares[i] // a fuction that square can call when clicked  \n      ,\n      onClick: () => this.props.handleClick(i),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 24\n      }\n    });\n  }\n\n  render() {\n    // const winner = determineTheWinner(this.state.squares) \n    // let status;\n    // if (winner){\n    //         status = \"Winner is :\" + winner;\n    // }else {\n    //         status = \"next player\" + (this.state.xisNext ? \"X\":\"O\");\n    // }\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }\n    }, this.renderSquare(0), this.renderSquare(1), this.renderSquare(2)), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }\n    }, this.renderSquare(3), this.renderSquare(4), this.renderSquare(5)), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }\n    }, this.renderSquare(6), this.renderSquare(7), this.renderSquare(8)));\n  }\n\n}\n\nexport default Board; //   helper function \n\nfunction determineTheWinner(squares) {\n  const lines = [[0, 1, 2], [3, 4, 5], [6, 7, 8], [0, 3, 6], [1, 4, 7], [2, 5, 8], [0, 4, 8], [2, 4, 6]];\n\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return squares[a];\n    }\n  }\n\n  return null;\n}","map":{"version":3,"sources":["/Users/musafirikayambi/Desktop/react-assignment-1-kayambi/src/components/Board.js"],"names":["React","Cell","Board","Component","renderSquare","i","props","squares","handleClick","render","determineTheWinner","lines","length","a","b","c"],"mappings":";AAAA;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,IAAP,MAAiB,QAAjB;;AAGA,MAAMC,KAAN,SAAoBF,KAAK,CAACG,SAA1B,CAAoC;AAC5B;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAC,EAAAA,YAAY,CAACC,CAAD,EAAG;AACP,wBAAO,oBAAC,IAAD;AACC,MAAA,KAAK,EAAG,KAAKC,KAAL,CAAWC,OAAX,CAAmBF,CAAnB,CADT,CAEf;AAFe;AAGC,MAAA,OAAO,EAAI,MAAI,KAAKC,KAAL,CAAWE,WAAX,CAAuBH,CAAvB,CAHhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AAKP;;AACDI,EAAAA,MAAM,GAAE;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACF,wBACA;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAEE;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACS,KAAKL,YAAL,CAAkB,CAAlB,CADT,EAES,KAAKA,YAAL,CAAkB,CAAlB,CAFT,EAGS,KAAKA,YAAL,CAAkB,CAAlB,CAHT,CAFF,eAOE;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACS,KAAKA,YAAL,CAAkB,CAAlB,CADT,EAES,KAAKA,YAAL,CAAkB,CAAlB,CAFT,EAGS,KAAKA,YAAL,CAAkB,CAAlB,CAHT,CAPF,eAYE;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACS,KAAKA,YAAL,CAAkB,CAAlB,CADT,EAES,KAAKA,YAAL,CAAkB,CAAlB,CAFT,EAGS,KAAKA,YAAL,CAAkB,CAAlB,CAHT,CAZF,CADA;AAmBE;;AAtD4B;;AAwDhC,eAAeF,KAAf,C,CACI;;AACJ,SAASQ,kBAAT,CAA4BH,OAA5B,EAAqC;AACjC,QAAMI,KAAK,GAAG,CACZ,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CADY,EAEZ,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAFY,EAGZ,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAHY,EAIZ,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAJY,EAKZ,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CALY,EAMZ,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CANY,EAOZ,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAPY,EAQZ,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CARY,CAAd;;AAUA,OAAK,IAAIN,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGM,KAAK,CAACC,MAA1B,EAAkCP,CAAC,EAAnC,EAAuC;AACrC,UAAM,CAACQ,CAAD,EAAIC,CAAJ,EAAOC,CAAP,IAAYJ,KAAK,CAACN,CAAD,CAAvB;;AACA,QAAIE,OAAO,CAACM,CAAD,CAAP,IAAcN,OAAO,CAACM,CAAD,CAAP,KAAeN,OAAO,CAACO,CAAD,CAApC,IAA2CP,OAAO,CAACM,CAAD,CAAP,KAAeN,OAAO,CAACQ,CAAD,CAArE,EAA0E;AACxE,aAAOR,OAAO,CAACM,CAAD,CAAd;AACD;AACF;;AACD,SAAO,IAAP;AACD","sourcesContent":["// react class component \nimport React from 'react';\nimport Cell from './Cell';\n\n\nclass Board extends React.Component { \n        // adding a constructor to  the board's initial state to contain anarray\n        //  of 9 nulls corresponding to the squares\n\n        // handleClick(i){\n        //         //  create a copy of the squares to be modified instead of modifying the original\n        //         // using slice() metho\n        //         const newSquares = this.state.squares.slice();\n        //               if (determineTheWinner(newSquares) || newSquares[i]){\n        //                       alert(\"the game is over, restart the game\")\n        //                       return;\n        //               } \n        //                newSquares[i] = this.state.xisNext ? \"X\":\"O\" ;\n        //         //        Save new outcome of squares clicked  to the existing cellls data\n        //                this.setState ({\n        //                        squares:newSquares,\n        //                        xisNext: !this.state.xisNext,\n        //         })\n        // }\n        // Square should be rendered and attach an event listiners to it.\n        renderSquare(i){\n                return <Cell \n                        value ={this.props.squares[i]} \n        // a fuction that square can call when clicked  \n                        onClick = {()=>this.props.handleClick(i)}\n                        />\n        }\n        render(){\n        // const winner = determineTheWinner(this.state.squares) \n        // let status;\n        // if (winner){\n        //         status = \"Winner is :\" + winner;\n        // }else {\n        //         status = \"next player\" + (this.state.xisNext ? \"X\":\"O\");\n        // }\n      return ( \n      <div className=\"container\">\n        {/* <div className=\"status\">{status}</div> */}\n        <div className=\"row\">\n                {this.renderSquare(0)}\n                {this.renderSquare(1)}           \n                {this.renderSquare(2)}\n        </div>\n        <div className=\"row\">\n                {this.renderSquare(3)}\n                {this.renderSquare(4)}           \n                {this.renderSquare(5)}\n        </div>\n        <div className=\"row\">\n                {this.renderSquare(6)}\n                {this.renderSquare(7)}           \n                {this.renderSquare(8)}\n        </div>\n      </div>\n      )}\n    }\n    export default Board;\n        //   helper function \n    function determineTheWinner(squares) {\n        const lines = [\n          [0, 1, 2],\n          [3, 4, 5],\n          [6, 7, 8],\n          [0, 3, 6],\n          [1, 4, 7],\n          [2, 5, 8],\n          [0, 4, 8],\n          [2, 4, 6],\n        ];\n        for (let i = 0; i < lines.length; i++) {\n          const [a, b, c] = lines[i];\n          if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n            return squares[a];\n          }\n        }\n        return null;\n      }"]},"metadata":{},"sourceType":"module"}