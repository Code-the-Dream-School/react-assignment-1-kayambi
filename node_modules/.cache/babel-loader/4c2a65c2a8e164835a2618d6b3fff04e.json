{"ast":null,"code":"var _jsxFileName = \"/Users/musafirikayambi/Desktop/react-assignment-1-kayambi/src/components/Board.js\";\n// react class component \nimport React from 'react'; // import Cell from './Cell';\n\nclass Board extends React.Component {\n  handleClick(i) {\n    //  create a copy of the squares to be modified instead of modifying the original\n    // using slice() method and the take the turns between two players \n    const squares = this.state.squares.slice(); // Change the board's handleClick functiion to return early by ignoring a click if some has won the game \n    // or if the a square is already filled: \n\n    if (calculateWiner(squares) || squares[i]) {\n      return;\n    }\n\n    squares[i] = this.state.xisNext ? \"X\" : \"O\"; //        Save new outcome of squares clicked  to the existing squares data\n\n    this.setState({\n      squares: squares,\n      xisNext: !this.state.xisNext\n    });\n  } // Square should be rendered and attach an event listiners to it.\n\n\n  renderSquare(i) {\n    return /*#__PURE__*/React.createElement(Cell, {\n      value: this.props.squares[i] // a fuction that square can call when clicked  \n      ,\n      onClick: () => this.props.onClick(i),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 25\n      }\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 27\n      }\n    }, this.renderSquare(0), this.renderSquare(1), this.renderSquare(2)), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 27\n      }\n    }, this.renderSquare(3), this.renderSquare(4), this.renderSquare(5)), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 27\n      }\n    }, this.renderSquare(6), this.renderSquare(7), this.renderSquare(8)));\n  }\n\n}\n\nexport default Board; // Helper function    \n\nfunction calculateWiner(squares) {\n  const lines = [[0, 1, 2], [3, 4, 5], [6, 7, 8], [0, 3, 6], [1, 4, 7], [2, 5, 8], [0, 4, 8], [2, 4, 6]];\n\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return squares[a];\n    }\n  }\n\n  return null;\n}","map":{"version":3,"sources":["/Users/musafirikayambi/Desktop/react-assignment-1-kayambi/src/components/Board.js"],"names":["React","Board","Component","handleClick","i","squares","state","slice","calculateWiner","xisNext","setState","renderSquare","props","onClick","render","lines","length","a","b","c"],"mappings":"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","sourcesContent":["// react class component \nimport React from 'react';\n// import Cell from './Cell';\n\nclass Board extends React.Component {  \n        handleClick(i){\n                //  create a copy of the squares to be modified instead of modifying the original\n                // using slice() method and the take the turns between two players \n                const squares = this.state.squares.slice();\n                // Change the board's handleClick functiion to return early by ignoring a click if some has won the game \n                // or if the a square is already filled: \n                if (calculateWiner(squares) || squares[i]){\n                        return;\n                }\n                       squares[i] = this.state.xisNext ? \"X\": \"O\";\n                //        Save new outcome of squares clicked  to the existing squares data\n                       this.setState ({    \n                           squares:squares,\n                           xisNext: !this.state.xisNext,\n                });\n        }\n\n        // Square should be rendered and attach an event listiners to it.\n        renderSquare(i){\n                return (<Cell \n                       value ={this.props.squares[i]} \n                        // a fuction that square can call when clicked  \n                        onClick = {()=> this.props.onClick(i)}\n                        />\n                );\n        }\n        render() { \n                return ( \n                        <div className=\"container\">\n                          <div className=\"row\">\n                                  {this.renderSquare(0)}\n                                  {this.renderSquare(1)}           \n                                  {this.renderSquare(2)}\n                          </div>\n                          <div className=\"row\">\n                                  {this.renderSquare(3)}\n                                  {this.renderSquare(4)}           \n                                  {this.renderSquare(5)}\n                          </div>\n                          <div className=\"row\">\n                                  {this.renderSquare(6)}\n                                  {this.renderSquare(7)}           \n                                  {this.renderSquare(8)}\n                          </div>\n                        </div>\n                        )}\n    }\n    export default Board;\n     // Helper function    \nfunction calculateWiner(squares){\n        const lines=[\n                [0,1,2],\n                [3,4,5],\n                [6,7,8],\n                [0,3,6],\n                [1,4,7],\n                [2,5,8],\n                [0,4,8],\n                [2,4,6],\n\n        ];\n        for (let i=0; i <  lines.length  ; i ++){\n                const [a,b,c] = lines[i];\n                if (squares[a] && squares[a] === squares[b] && squares[a]=== squares[c]) \n                    {\n                            return squares[a];\n                    }\n        }\n        return null;\n}"]},"metadata":{},"sourceType":"module"}