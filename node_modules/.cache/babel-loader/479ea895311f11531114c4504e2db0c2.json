{"ast":null,"code":"var _jsxFileName = \"/Users/musafirikayambi/Desktop/react-assignment-1-kayambi/src/components/Board.js\";\n// react class component \nimport React from 'react';\nimport Cell from './Cell';\n\nclass Board extends React.Component {\n  // adding a constructor to  the board's initial state to contain an array\n  //  of 9 nulls corresponding to the squares\n  constructor(props) {\n    super(props);\n    this.state = {\n      squares: Array(9).fill(null),\n      xisNext: true\n    };\n  }\n\n  handleClick(i) {\n    //  create a copy of the squares to be modified instead of modifying the original\n    // using slice() method and the take the turns between two players \n    const squares = this.state.squares.slice();\n    squares[i] = this.state.xisNext ? \"X\" : \"O\"; //        Save new outcome of squares clicked  to the existing squares data\n\n    this.setState({\n      squares: squares,\n      xisNext: !this.state.xisNext\n    });\n  } // Square should be rendered and attach an event listiners to it.\n\n\n  renderSquare(i) {\n    return /*#__PURE__*/React.createElement(Cell, {\n      value: this.state.squares[i] // a fuction that square can call when clicked  \n      ,\n      onClick: () => this.handleClick(i),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 24\n      }\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 9\n      }\n    }, this.renderSquare(0), this.renderSquare(1), this.renderSquare(2)), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 9\n      }\n    }, this.renderSquare(3), this.renderSquare(4), this.renderSquare(5)), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }\n    }, this.renderSquare(6), this.renderSquare(7), this.renderSquare(8)));\n  }\n\n}\n\nexport default Board;\n\nfunction determineTheWinner(squares) {\n  const lines = [[0, 1, 2], [3, 4, 5], [6, 7, 8], [0, 3, 6], [1, 4, 7], [2, 5, 8], [0, 4, 8], [2, 4, 6]];\n\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return squares[a];\n    }\n  }\n\n  return null;\n}","map":{"version":3,"sources":["/Users/musafirikayambi/Desktop/react-assignment-1-kayambi/src/components/Board.js"],"names":["React","Cell","Board","Component","constructor","props","state","squares","Array","fill","xisNext","handleClick","i","slice","setState","renderSquare","render","determineTheWinner","lines","length","a","b","c"],"mappings":"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","sourcesContent":["// react class component \nimport React from 'react';\nimport Cell from './Cell';\n\n\nclass Board extends React.Component { \n        // adding a constructor to  the board's initial state to contain an array\n        //  of 9 nulls corresponding to the squares\n        constructor(props){\n                super(props) \n                this.state = { \n                        squares:Array(9).fill(null),\n                        xisNext:true,\n\n                };\n\n        }\n        handleClick(i){\n                //  create a copy of the squares to be modified instead of modifying the original\n                // using slice() method and the take the turns between two players \n                const squares = this.state.squares.slice();\n                       squares[i] = this.state.xisNext ? \"X\": \"O\";\n                //        Save new outcome of squares clicked  to the existing squares data\n                       this.setState ({ \n                           squares:squares,\n                           xisNext:!this.state.xisNext,\n                });\n        }\n        // Square should be rendered and attach an event listiners to it.\n        renderSquare(i){\n                return <Cell \n                        value ={this.state.squares[i]} \n        // a fuction that square can call when clicked  \n                        onClick = {()=>this.handleClick(i)}\n                        />\n        }\n  render(){\n\n      return( \n      <div className=\"container\">\n        <div className=\"row\">\n                {this.renderSquare(0)}\n                {this.renderSquare(1)}           \n                {this.renderSquare(2)}\n        </div>\n        <div className=\"row\">\n                {this.renderSquare(3)}\n                {this.renderSquare(4)}           \n                {this.renderSquare(5)}\n        </div>\n        <div className=\"row\">\n                {this.renderSquare(6)}\n                {this.renderSquare(7)}           \n                {this.renderSquare(8)}\n        </div>\n      </div>\n      )}\n    }\n    export default Board;\n          \nfunction determineTheWinner(squares){\n        const lines=[\n                [0,1,2],\n                [3,4,5],\n                [6,7,8],\n                [0,3,6],\n                [1,4,7],\n                [2,5,8],\n                [0,4,8],\n                [2,4,6],\n\n        ];\n        for (let i=0; i <  lines.length  ; i ++){\n                const [a,b,c] = lines[i];\n                if (squares[a] && squares[a] ===\n                    squares[b] && squares[a]=== squares[c]) {\n                            return squares[a];\n                    }\n        }\n        return null;\n}\n"]},"metadata":{},"sourceType":"module"}