{"ast":null,"code":"var _jsxFileName = \"/Users/musafirikayambi/Desktop/react-assignment-1-kayambi/src/components/Game.js\";\nimport React, { Component } from 'react';\nimport Board from './Board'; // import Header from './Header';\n\nexport default class Game extends Component {\n  // adding a constructor to  the Game  initial state to contain an array\n  constructor(props) {\n    super(props);\n    this.state = {\n      history: [{\n        squares: Array(9).fill(null)\n      }],\n      xisNext: true\n    };\n  }\n\n  handleClick(i) {\n    //  create a copy of the squares to be modified instead of modifying the original\n    // using slice() metho\n    const history = this.state.history;\n    const current = history[history.length - 1];\n    const newSquares = current.squares.slice();\n\n    if (determineTheWinner(newSquares) || newSquares[i]) {\n      alert(\"the game is over, restart the game\");\n      return;\n    }\n\n    newSquares[i] = this.state.xisNext ? \"X\" : \"O\"; //        Save new outcome of squares clicked  to the existing cellls data\n\n    this.setState({\n      history: history.concat([{\n        squares: newSquares\n      }]),\n      xisNext: !this.state.xisNext\n    });\n  }\n\n  render() {\n    const history = this.state.history;\n    const current = history[history.length - 1];\n    const winner = determineTheWinner(current.squares);\n    let status;\n\n    if (winner) {\n      status = \"winner: \" + winner;\n    } else {\n      status = \"next\" + (this.state.xisNext ? \"X\" : \"O\");\n    }\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"game\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"game-board\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(Board, {\n      squares: current.squares,\n      OnClick: i => this.handleClick(i),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 23\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"game-info\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 19\n      }\n    }, status)));\n  }\n\n} //   helper function \n\nfunction determineTheWinner(squares) {\n  const lines = [[0, 1, 2], [3, 4, 5], [6, 7, 8], [0, 3, 6], [1, 4, 7], [2, 5, 8], [0, 4, 8], [2, 4, 6]];\n\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return squares[a];\n    }\n  }\n\n  return null;\n}","map":{"version":3,"sources":["/Users/musafirikayambi/Desktop/react-assignment-1-kayambi/src/components/Game.js"],"names":["React","Component","Board","Game","constructor","props","state","history","squares","Array","fill","xisNext","handleClick","i","current","length","newSquares","slice","determineTheWinner","alert","setState","concat","render","winner","status","lines","a","b","c"],"mappings":"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","sourcesContent":["import React, {Component}  from 'react';\nimport Board from './Board'; \n// import Header from './Header';\n\n\nexport default class  Game extends Component { \n// adding a constructor to  the Game  initial state to contain an array\n     constructor(props){\n       super(props)\n       this.state = {\n         history:[{\n           squares:Array(9).fill(null),\n         }],\n         xisNext : true,\n       };\n     }\n\n\n     handleClick(i){\n      //  create a copy of the squares to be modified instead of modifying the original\n      // using slice() metho\n      const history = this.state.history;\n      const current = history[history.length -1];\n      const newSquares = current.squares.slice();\n\n            if (determineTheWinner(newSquares) || newSquares[i]){\n                    alert(\"the game is over, restart the game\")\n                    return;\n            } \n             newSquares[i] = this.state.xisNext ? \"X\":\"O\" ;\n      //        Save new outcome of squares clicked  to the existing cellls data\n             this.setState ({\n                     history:history.concat([{\n                       squares:newSquares\n                     }]),\n                     xisNext: !this.state.xisNext,\n      })\n     }\n\n    render(){ \n      const history = this.state.history;\n      const current = history[history.length -1];\n      const winner = determineTheWinner(current.squares);\n      let  status;\n           if (winner){\n             status = \"winner: \" + winner;\n\n           }else {\n             status = \"next\" +(this.state.xisNext ? \"X\":\"O\");\n           } \n            return( \n                  <div className=\"game\">\n                  <div className=\"game-board\">\n                      <Board  \n                      squares={current.squares}\n                      OnClick ={(i) => this.handleClick(i)}  \n                      />\n                  </div>\n                  <div className=\"game-info\"> \n                  <div>{status}</div>\n                  {/* <ol>{moves}</ol> */}\n                  </div>\n                  </div>\n                  );\n  }\n}\n\n       //   helper function \n    function determineTheWinner(squares) {\n        const lines = [\n          [0, 1, 2],\n          [3, 4, 5],\n          [6, 7, 8],\n          [0, 3, 6],\n          [1, 4, 7],\n          [2, 5, 8],\n          [0, 4, 8],\n          [2, 4, 6],\n        ];\n        for (let i = 0; i < lines.length; i++) {\n          const [a, b, c] = lines[i];\n          if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n            return squares[a];\n          }\n        }\n        return null;\n      }"]},"metadata":{},"sourceType":"module"}