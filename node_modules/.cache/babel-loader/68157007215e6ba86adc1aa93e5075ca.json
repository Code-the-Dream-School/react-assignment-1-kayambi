{"ast":null,"code":"var _jsxFileName = \"/Users/musafirikayambi/Desktop/react-assignment-1-kayambi/src/components/Board.js\";\n// react class component \nimport React from 'react';\nimport Cell from './Cell';\n\nclass Board extends React.Component {\n  // adding a constructor to  the board's initial state to contain an array\n  //  of 9 nulls corresponding to the squares\n  constructor(props) {\n    super(props);\n    this.state = {\n      cells: Array(9).fill(null),\n      xisNext: true\n    };\n  } // \n\n\n  handleClick(i) {\n    //  create a copy of the squares to be modified instead of modifying the original\n    // using slice() method and the take the turns between two players \n    const newCells = this.state.cells.slice(); // Change the board's handleClick functiion to return early by ignoring a click if some has won the game \n    // or if the a square is already filled: \n\n    if (determineTheWinner(newCells) || newCells[i]) {\n      return;\n    }\n\n    newCells[i] = this.state.xisNext ? \"X\" : \"O\"; //        Save new outcome of cells clicked  to the existing cells data\n\n    this.setState({\n      cells: newCells,\n      xisNext: !this.state.xisNext\n    });\n  } // Square should be rendered and attach an event listiners to it.\n\n\n  renderSquare(i) {\n    return /*#__PURE__*/React.createElement(Cell, {\n      value: this.state.cells[i] // a fuction that square can call when clicked  \n      ,\n      onClick: () => this.handleClick(i),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 24\n      }\n    });\n  }\n\n  render() {\n    //   Check if the player has won or lost\n    const winner = determineTheWinner(this.state.cells);\n    let statusHis;\n\n    if (winner) {\n      statusHis = 'winner:' + winner;\n    } else {\n      statusHis = 'Next Player: ' + (this.state.xisNext ? \"X\" : \"O\");\n    }\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }\n    }, this.renderSquare(0), this.renderSquare(1), this.renderSquare(2)), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }\n    }, this.renderSquare(3), this.renderSquare(4), this.renderSquare(5)), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }\n    }, this.renderSquare(6), this.renderSquare(7), this.renderSquare(8)));\n  }\n\n}\n\nexport default Board;\n\nfunction determineTheWinner(cells) {\n  const lines = [[0, 1, 2], [3, 4, 5], [6, 7, 8], [0, 3, 6], [1, 4, 7], [2, 5, 8], [0, 4, 8], [2, 4, 6]];\n\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n\n    if (cells[a] && cells[a] === cells[b] && cells[a] === cells[c]) {\n      return cells[a];\n    }\n  }\n\n  return null;\n}","map":{"version":3,"sources":["/Users/musafirikayambi/Desktop/react-assignment-1-kayambi/src/components/Board.js"],"names":["React","Cell","Board","Component","constructor","props","state","cells","Array","fill","xisNext","handleClick","i","newCells","slice","determineTheWinner","setState","renderSquare","render","winner","statusHis","lines","length","a","b","c"],"mappings":"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","sourcesContent":["// react class component \nimport React from 'react';\nimport Cell from './Cell';\n\n\nclass Board extends React.Component { \n        // adding a constructor to  the board's initial state to contain an array\n        //  of 9 nulls corresponding to the squares\n        constructor(props){\n                super(props) \n                this.state = { \n                        cells:Array(9).fill(null),\n                        xisNext:true,\n\n                };\n\n        }\n        // \n        handleClick(i){\n\n                //  create a copy of the squares to be modified instead of modifying the original\n                // using slice() method and the take the turns between two players \n                const newCells = this.state.cells.slice();\n                // Change the board's handleClick functiion to return early by ignoring a click if some has won the game \n                // or if the a square is already filled: \n                if (determineTheWinner(newCells) || newCells[i]){\n                        return\n                }\n                       newCells[i] = this.state.xisNext ? \"X\": \"O\";\n                //        Save new outcome of cells clicked  to the existing cells data\n                       this.setState ({    \n                           cells:newCells,\n                           xisNext:!this.state.xisNext,\n                });\n        }\n        // Square should be rendered and attach an event listiners to it.\n        renderSquare(i){\n                return <Cell \n                        value ={this.state.cells[i]} \n        // a fuction that square can call when clicked  \n                        onClick = {()=>this.handleClick(i)}\n                        />\n        }\n        render(){\n        //   Check if the player has won or lost\n          const winner = determineTheWinner(this.state.cells)\n                let  statusHis;\n                if (winner){\n                        statusHis = 'winner:' + winner;\n                    \n                }else{\n                       statusHis = 'Next Player: ' + (this.state.xisNext ? \"X\":\"O\")\n                    \n                }\n        \n      return ( \n      <div className=\"container\">\n        <div className=\"row\">\n                {this.renderSquare(0)}\n                {this.renderSquare(1)}           \n                {this.renderSquare(2)}\n        </div>\n        <div className=\"row\">\n                {this.renderSquare(3)}\n                {this.renderSquare(4)}           \n                {this.renderSquare(5)}\n        </div>\n        <div className=\"row\">\n                {this.renderSquare(6)}\n                {this.renderSquare(7)}           \n                {this.renderSquare(8)}\n        </div>\n      </div>\n      )}\n    }\n    export default Board;\n          \nfunction determineTheWinner(cells){\n        const lines=[\n                [0,1,2],\n                [3,4,5],\n                [6,7,8],\n                [0,3,6],\n                [1,4,7],\n                [2,5,8],\n                [0,4,8],\n                [2,4,6],\n\n        ];\n\n        for (let i=0; i <  lines.length  ; i ++){\n                const [a,b,c] = lines[i];\n                if (cells[a] && cells[a] === cells[b] && cells[a]=== cells[c]) \n                    {\n                            return cells[a];\n                    }\n        }\n        return null;\n}"]},"metadata":{},"sourceType":"module"}