{"ast":null,"code":"var _jsxFileName = \"/Users/musafirikayambi/Desktop/react-assignment-1-kayambi/src/components/Board.js\";\n// react class component \nimport React from 'react';\nimport Cell from './Cell';\nexport default class Board extends React.Component {\n  // adding a constructor to  the board's initial state to contain anarray\n  //  of 9 nulls corresponding to the squares\n  constructor(props) {\n    super(props);\n    this.state = {\n      square: squares,\n      xisNext: true\n    };\n  }\n\n  handleClick(i) {\n    //  create a copy of the squares to be modified instead of modifying the original\n    // using slice() method\n    const newSquares = this.state.squares.slice();\n\n    if (determineTheWinner(newSquares) || newSquares[i]) {\n      alert(\"the game is over, restart the game\");\n      return;\n    }\n\n    newSquares[i] = this.state.xisNext ? \"X\" : \"O\"; // Save new outcome of squares clicked  to the existing cells data\n\n    this.setState({\n      squares: newSquares,\n      xisNext: !this.state.xisNext\n    });\n  } // Square should be rendered and attach an event listiners to it.\n\n\n  renderSquare(i) {\n    return /*#__PURE__*/React.createElement(Cell, {\n      value: this.state.squares[i] // a fuction that square can call when clicked  \n      ,\n      onClick: () => this.handleClick(i),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 24\n      }\n    });\n  }\n\n  render() {\n    const winner = determineTheWinner(this.state.squares);\n    let status;\n\n    if (winner) {\n      status = \"Winner is :\" + winner;\n    } else {\n      status = \"next player\" + (this.state.xisNext ? \"X\" : \"O\");\n    }\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"status\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }\n    }, status), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }\n    }, this.renderSquare(0), this.renderSquare(1), this.renderSquare(2)), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }\n    }, this.renderSquare(3), this.renderSquare(4), this.renderSquare(5)), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }\n    }, this.renderSquare(6), this.renderSquare(7), this.renderSquare(8)));\n  }\n\n} //   helper function \n\nfunction determineTheWinner(squares) {\n  const lines = [[0, 1, 2], [3, 4, 5], [6, 7, 8], [0, 3, 6], [1, 4, 7], [2, 5, 8], [0, 4, 8], [2, 4, 6]];\n\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return squares[a];\n    }\n  }\n\n  return null;\n}","map":{"version":3,"sources":["/Users/musafirikayambi/Desktop/react-assignment-1-kayambi/src/components/Board.js"],"names":["React","Cell","Board","Component","constructor","props","state","square","squares","xisNext","handleClick","i","newSquares","slice","determineTheWinner","alert","setState","renderSquare","render","winner","status","lines","length","a","b","c"],"mappings":"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","sourcesContent":["// react class component \nimport React from 'react';\nimport Cell from './Cell';\n\n\nexport  default class Board extends React.Component { \n        // adding a constructor to  the board's initial state to contain anarray\n        //  of 9 nulls corresponding to the squares\n        constructor (props){ \n                super(props)\n                this.state = {\n                        square:squares,\n                        xisNext:true,\n                }\n\n        }\n\n        handleClick(i){\n                //  create a copy of the squares to be modified instead of modifying the original\n                // using slice() method\n                const newSquares = this.state.squares.slice();\n                      if (determineTheWinner(newSquares) || newSquares[i]){\n                              alert(\"the game is over, restart the game\")\n                              return;\n                      } \n                       newSquares[i] = this.state.xisNext ? \"X\":\"O\" ;\n        // Save new outcome of squares clicked  to the existing cells data\n                       this.setState ({\n                               squares : newSquares,\n                               xisNext : !this.state.xisNext,\n                });\n        }\n        // Square should be rendered and attach an event listiners to it.\n        renderSquare(i){\n                return <Cell value ={this.state.squares[i]} \n        // a fuction that square can call when clicked  \n                        onClick = {() => this.handleClick(i)}\n                        />\n        }\n\n        render(){\n        const winner = determineTheWinner(this.state.squares) \n        let status;\n        if (winner){\n                status = \"Winner is :\" + winner;\n        }else {\n                status = \"next player\" + (this.state.xisNext ? \"X\":\"O\");\n        }\n      return ( \n      <div className=\"container\">\n        <div className=\"status\">{status}</div>\n        <div className=\"row\">\n                {this.renderSquare(0)}\n                {this.renderSquare(1)}           \n                {this.renderSquare(2)}\n        </div>\n        <div className=\"row\">\n                {this.renderSquare(3)}\n                {this.renderSquare(4)}           \n                {this.renderSquare(5)}\n        </div>\n        <div className=\"row\">\n                {this.renderSquare(6)}\n                {this.renderSquare(7)}           \n                {this.renderSquare(8)}\n        </div>\n      </div>\n      )}\n    }\n\n             //   helper function \n             function determineTheWinner(squares) {\n                const lines = [\n                  [0, 1, 2],\n                  [3, 4, 5],\n                  [6, 7, 8],\n                  [0, 3, 6],\n                  [1, 4, 7],\n                  [2, 5, 8],\n                  [0, 4, 8],\n                  [2, 4, 6],\n                ];\n                for (let i = 0; i < lines.length; i++) {\n                  const [a, b, c] = lines[i];\n                  if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n                    return squares[a];\n                  }\n                }\n                return null;\n              }\n"]},"metadata":{},"sourceType":"module"}